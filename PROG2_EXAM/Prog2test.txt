1. List 4 ways to pass to function ?
2. Tính giai thừa theo recursive và iterative way
3. Danh sách các cuốn sách và các tự đề asisibn (mã sách), năm xuất bản chọn data sort theo tên , mã sách => định nghĩa data structure dùng
4.
5. Cho 1 struct mỗi strunct có pointer tới struct , cho code => đoạn code làm gì ? Viết đoạn code thêm phần tủ có linked list 
6. Quản lý nhân vuên có device ,1 device property , viết 1 hay nhiều class liên hệ vs nhau , lsit at least 2 benefits of using class ()

1.By value, by reference , by pointer, by constant reference

2.
#include <iostream>
using namespace std;
int recursive(int n);
int main() {
    cout<<recursive(7);
	return 0;
}
// int recursive(int n){
//     if( n == 0){
//         return 1;
//     }
//     else{
//         int result = 1;
//         for(int i = 1 ; i <= n ; i++){
//             result = result*i;
//         }
//         return result;
//     }
// }
int recursive(int n){
    if(n==0){
        return 1;
    }
    else{
        return n*recursive(n-1);
    }
}


3.
Maps are associative containers that store elements in a mapped fashion. Each element has a key value and a mapped value. No two mapped values can have same key values.
Vectors are known as dynamic arrays with the ability to resize itself automatically when an element is inserted or deleted,their storage being handled automatically by the container.

ten nhan vien ,id nhan vien ,other information

struct Employee(){

}employee1,employee2;
map<pair<int, string> , struct> DATA;
DATA[(1,'A')] = employee1;


5.#include <iostream>
using namespace std;
struct node{
    int data;
    struct node* next;
};
class linked_list{
    private:
        node* tail;
    public:
        node* head;
        linked_list(){
            head = NULL;
            tail = NULL;
        }
        void insert(int n);
};
// linked_list::linked_list(){
//     head = NULL;
//     tail = NULL;
// };
void linked_list::insert(int n){
    node * tmp = new node;
    tmp->data = n;
    tmp->next = NULL;
    
    if(head == NULL){
        head = tmp;
        tail = tmp;
    }else{
        tail->next = tmp;
        tail = tail->next;
    }
}
void display(linked_list a);
//void insert(int n);
int main() {
    linked_list a;
    a.insert(3);
    a.insert(4);
    a.insert(5);
    a.insert(6);
    display(a);
	return 0;
}
void display(linked_list a){
    node* ptr = new node;
    ptr = a.head;
    if (a.head == NULL){
        return ;
    }else{
        ptr = a.head;
        while(ptr!= NULL){
            cout<<ptr->data<<" ";
            ptr = ptr->next;
        }
    }
}
5.

int * p ;
...................====>p = 4;
cout<<p
cout<<*p
cout<<&p
there was an error



6.	Using class have many benefits such as inheritance, encapsulation

______________________________________

3. Define data structure in C++ code.
6. Fish route and ground, class relate to each other ?? Implement the .hh file




..

1.
+ Pass by ref, function pointer, const ref, value
+ If we do not initialize the compiler will automatically assign value, which may result in wrong in our calculation
2.
struct employee {
	int id;
	string office;
	struct* below_emplyee;
};
map<pair<int,pair>,struct>DATA;
3.
int power(int base, int expo){
	if(power < 0){
		return power(base,-expo);
	}else{
		if(expo == 0){
			return 1;
		}else{
			return base*power(base,power-1);
		}
	}
}

A function is tail-recursive, if the recursive call is located in such a point in the function that after the call, there are no statements to execute or expressions to evaluate

int tail_calculatePower(int base, int power, int result){			//result = 1 in main loop
	if (power == 0){
		return result;
	}else{
		return calculatePower(base, power-1, result*base);
	}

}

4.=>>>>> p = 7 : error
5.
if(first == nullptr){
	first_ = new_item;
	last _ = new_item;
}
memory leak


6.class A{
public:
A();

~A();
private:
};


-Benefit using class
Can be sure about integrity of data. Constructor and mutator will take cate that object does not receive erroneous value 
The implementation of a module ( i.e. the private interface) can be modified while the public interface stays intact.
Classes help you to control the complexity of a program, because they allow you to combine logical parts of the program.
The modules can be developed in the project side by side after agreeing on the public interface.

______________________________________STL	
-If the vector is empty (there are no elements in it) when pop_back is executed, an exception occurs.

If we want to save the return value of the method size in the variable, its type should be
#vector<element_type>::size_type

The STL vector is a data structure that keeps the elements in the order they were stored. 
In STL terminology, structures like these are called sequences- data structure store data in order they are stored

______________________________________
In C++, the enumeration type is defined by the reserved word enum:

enum Type_name { element_1, ... , element_n };
The elements of the enumeration type are integer constants, and the C++ compiler defines their values automatically: element_1 = 0, element_2 = 1, etc. If the programmer wishes, they can define the values of the elements:

enum Type_name { element_1 = value_1, ... , element_n = value_n };

______________________________________ data driven/data directed 
data can replace some of the commands and vice versa. The so-called data driven or data directed designing
 
The benefits of data driven programming include:

*The programs created are usually shorter, but still clear.
*The possibility of making errors is smaller.
*The programs are easier to expand and maintain.

______________________________________ Recursive 
Recursive function has two essential characteristics you should remember:

*It has to have a terminating condition (or several) that recognizes the trivial cases of the problem and reacts to them without having to make a new recursive call.
*Each recursive call has to simplify the problem in question in order to finally reach the trivial case

*Direct recursion happens when a function calls itself in its own body. For instance, factorial in the previous example uses direct recursion.

*Indirect recursion or mutual recursion means that the function func_a calls the function func_b which, in turn, calls func_a, et cetera:

*Tail recursion,recursive call is located in such a point in the function that after the call, 
there are no statements to execute or expressions to evaluate.
In other words, when the recursions ”unwind”, there are no actions left in the called function.

______________________________________ Memory management
Dangling pointer
either a reference or a pointer targeting a variable that no longer exists.

______________________________________ 
Initializing means that you set an initial value to a variable at the same time as you declare it. 
Assigning means setting the variable value with the operator =.
 
______________________________________ Smart pointer
smart pointers of C++ are library data types that automate the deallocating of memory when nothing points to it anymore.

